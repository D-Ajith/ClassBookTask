// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Set this in Render dashboard
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  role      Role      @default(USER)
  bookings  Booking[]
  auditLogs AuditLog[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users") // maps Prisma model User -> table "users"
}

model Class {
  id          String    @id @default(cuid())
  name        String
  description String
  sessions    Session[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("classes")
}

model Session {
  id        String    @id @default(cuid())
  classId   String
  class     Class     @relation(fields: [classId], references: [id], onDelete: Cascade)
  date      DateTime
  capacity  Int
  bookings  Booking[]
  auditLogs AuditLog[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("sessions")
}

model Booking {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, sessionId])
  @@map("bookings")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sessionId String?
  session   Session? @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  details   String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}

enum Role {
  USER
  ADMIN
}
